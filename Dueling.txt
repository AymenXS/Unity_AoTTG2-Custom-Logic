class Main {
    Description = "Dueling mode with global pausing";
    ScoreLimit = 75000;
    TitansStartAmount = 3;
    TitansAdditionPerWave = 1;
    RespawnDelay = 5.0;
    _hasSpawned = false;
    _dieTimeLeft = 0.0;
    DuelMode = "Speed Damage";
    DuelModeDropbox = "Speed Damage, Speedkilling";

    function OnGameStart() {
        if (Network.IsMasterClient) {
            Network.SendMessageAll("PauseGame");
            Waves.NextWave();
        }
    }

    function OnNetworkMessage(sender, msg) {
        if (msg == "PauseGame") {
            Time.TimeScale = 0.0;
        }
        elif (msg == "ResumeGame") {
            Time.TimeScale = 1.0;
        }
    }

    function OnCharacterSpawn(character) {
        if (character.IsMine && character.Type == "Titan") {
            character.DetectRange = 2000;
        }
        if (character.Type == "Shifter") {
            Run.EndRun();
        }
    }

    function OnPlayerSpawn(player, character) {
        if (character.IsCharacter) {
            Run._playerCharacter = character;
            player.ClearKDR();
            Network.SendMessageAll("ResumeGame");
        }
    }

    function OnTick() {
        if (Game.IsEnding || Run._isFinished) {return;}
        
        Run.UpdateTimer();
        
        if (Network.IsMasterClient) {
            self.Respawning();
        }
    }

    function OnSecond() {
        Run.UpdateUI();
    }

    function OnCharacterDie(victim, killer, killerName) {
        if (victim.IsMainCharacter) {
            self._dieTimeLeft = self.RespawnDelay;
            Run.UpdateUI();
        }
        if (victim.Type == "Titan" && Network.IsMasterClient) {
            Run.UpdateUI();
            Waves.CheckForNewWave();
        }
    }

    function OnButtonClick(button) {
        if (button == "Restart") {
            Game.End(0);
        }
        if (button == "Back") {
            Network.SendMessageAll("ResumeGame");
        }
    }

    function Respawning() {
        self._dieTimeLeft = self._dieTimeLeft - Time.TickTime;
        if (Network.MyPlayer.Status == "Dead" && self._dieTimeLeft <= 0.0) {
            Game.SpawnPlayer(Network.MyPlayer, false);
        }
    }
}

extension Run {
    _isFinished = false;
    _playerCharacter = null;

    function UpdateTimer() {
        if (self._playerCharacter == null || self._playerCharacter.Player == null) {return;}
        kills = self._playerCharacter.Player.Kills;
        damage = self._playerCharacter.Player.TotalDamage;

        if (Main.DuelMode == "Speed Damage") {
            if (damage > Main.ScoreLimit) {
                self.EndRun();
                if (Network.IsMasterClient) { # ADDED THIS
                    Time.TimeScale = 0.0;
                }
            }
        } else {
            if (kills > Main.ScoreLimit) {
                self.EndRun();
                if (Network.IsMasterClient) { # ADDED THIS
                    Time.TimeScale = 0.0;
                }
            }
        }
    }

    function EndRun() {
        self._isFinished = true;
        Network.SendMessageAll("PauseGame");
    }

    function UpdateUI() {
        if (self._playerCharacter == null) {return;}
        titans = Game.Titans.Count;
        wave = Waves._currentWave;
        time = Time.GameTime;
        CustomUI.ShowTopLabel(titans, wave, time);
    }
}

extension Waves {
    _currentWave = 0;
    _sizeMin = 2.5;
    _sizeMax = 3.0;

    function NextWave() {
        if (!Network.IsMasterClient) {return;}
        
        self._currentWave = self._currentWave + 1;
        titansAmount = Main.TitansAdditionPerWave * (self._currentWave - 1) + Main.TitansStartAmount;

        if (Main.DuelMode != "Speed Damage") {
            Game.SpawnTitans("Default", titansAmount);
            return;
        }

        titans = Game.SpawnTitans("Normal", titansAmount);
        for (titan in titans) {
            randomSize = Random.RandomFloat(self._sizeMin, self._sizeMax);
            titan.Size = randomSize;
        }
    }

    function CheckForNewWave() {
        if (!Network.IsMasterClient) {return;}
        if (Game.Titans.Count == 0) {
            self.NextWave();
        }
    }
}

extension CustomUI {
    function ShowTopLabel(titans, wave, time) {
        labelText = "Titans: <color=yellow>" + Convert.ToString(titans) + "</color> | Wave: <color=yellow>" + Convert.ToString(wave)
                + String.Newline + String.FormatFloat(time, 0) + "</color> / " + Convert.ToString(Main.ScoreLimit) + " Seconds";
        UI.SetLabelAll("TopCenter", labelText);
    }
}